name: CI

on: push

env:
  PYTHON_LATEST: "3.10"

jobs:
  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup build and test environment
        run: |
          python -VV
          python -m pip install --upgrade pip setuptools wheel

      - name: Build Python Package
        run: |
          python -m pip install ".[tests]"

      - name: Lint with flake8
        run: |
          pip install flake8==3.8.3
          flake8 --show-source src/ tests/

      - name: Unit Test with pytest
        run: |
          coverage run -p -m pytest
          coverage run -p -m pytest src/ --doctest-modules
      - name: Integration Test with radish
        run: |
          coverage run -p -m radish -b tests/integration/radish tests/integration/features --no-ansi
          coverage run -p -m radish.step_testing -b tests/integration/radish tests/integration/matcher-configs --no-ansi
          coverage run -p -m pytest tests/integration
        env:
          PYTHONIOENCODING: UTF-8

      - name: Combine coverage & fail if it's <28%.
        if: ${{ matrix.python-version == env.PYTHON_LATEST && matrix.os == 'ubuntu-latest' }}
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty --include=src/*
          python -m coverage report --include=src/* --fail-under=28

      - name: Upload HTML report
        if: ${{ always() && matrix.python-version == env.PYTHON_LATEST && matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: htmlcov
  
  docs:
    name: Build user-docs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{env.PYTHON_LATEST}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - name: Setup docs environment
        run: |
          python -m pip install ".[docs]"
      - name: Build documentation with sphinx
        run: |
          sphinx-build -W -b html -d doctrees docs/source docs/build/html
          sphinx-build -W -b doctest -d doctrees docs/source docs/build/html
      - name: Generate CHANGELOG
        run: |
          towncrier --draft

  publish:
    name: Publish Python Package to PyPI
    needs: [build, docs]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{env.PYTHON_LATEST}}
        if: startsWith(github.event.ref, 'refs/tags')
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - name: Build Package
        if: startsWith(github.event.ref, 'refs/tags')
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python setup.py sdist bdist_wheel --universal
      - name: Publish Package on PyPI
        if: startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
      - name: Create Release on GitHub
        if: startsWith(github.event.ref, 'refs/tags')
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
