# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test_on_Linux'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python27:
        python.version: '2.7'
      Python34:
        python.version: '3.4'
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -r requirements-dev.txt
    displayName: 'Install dependencies'

  - script: |
      coverage run --source radish -m pytest tests/unit/ --junitxml=junit/unit-test-results.xml
    displayName: 'Run unit tests'

  - script: |
      coverage run --source radish -m pytest tests/functional/ --junitxml=junit/functional-test-results.xml
    displayName: 'Run functional tests'

  - script: |
      coverage run --source radish -m pytest tests/integration/ --junitxml=junit/integration-test-results.xml
    displayName: 'Run integration tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/*test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Test_on_Windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python27:
        python.version: '2.7'
      Python34:
        python.version: '3.4'
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -r requirements-dev.txt
    displayName: 'Install dependencies'

  - script: |
      coverage run --source radish -m pytest tests/unit/ --junitxml=junit/unit-test-results.xml
    displayName: 'Run unit tests'

  - script: |
      coverage run --source radish -m pytest tests/functional/ --junitxml=junit/functional-test-results.xml
    displayName: 'Run functional tests'

  - script: |
      coverage run --source radish -m pytest tests/integration/ --junitxml=junit/integration-test-results.xml
    displayName: 'Run integration tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/*test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
